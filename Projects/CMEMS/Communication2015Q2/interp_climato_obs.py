__author__ = 'ctroupin'

import glob
import netCDF4
import os
import numpy as np
import matplotlib.pyplot as plt
from matplotlib import colors
from scipy import interpolate
from scipy import ndimage
from scipy.interpolate import interp1d
from mpl_toolkits.basemap import Basemap

plotclim, plottest1, plottest2, plotanom = 0, 1, 0, 1

cmap = plt.cm.hot_r
cmapanom = plt.cm.RdBu_r
fmin, fmax = 10., 30.
fmin2, fmax2 = 17., 28.
norm = colors.Normalize(vmin=fmin, vmax=fmax)
norm2 = colors.Normalize(vmin=fmin2, vmax=fmax2)
normanom = colors.Normalize(vmin=-2, vmax=2.)



platform = 'profiler-glider'
# platform = 'vessel'
period = "201506"
depthinterp = 10.

climatofile = "/data_local/DataOceano/SeaDataNet/JRA5_Temperature.19002009-2.4Danl.nc"
obsdir = "/home/ctroupin/DataOceano/MyOcean/4interp/"
outputfile = obsdir + 'anomalies_' + str(int(depthinterp)) + '_' + platform + '_' + period + '.dat'
timefile = obsdir + 'anomaliestime_' + str(int(depthinterp)) + '_' + platform+ '_' + period + '.dat'

# Read the climato at the chosen depth
with netCDF4.Dataset(climatofile) as nc:
    depthclim = nc.variables['depth'][:]
    lonclim = nc.variables['lon'][:]
    latclim = nc.variables['lat'][:]

    depthclimindex = np.where(depthclim == depthinterp)[0]
    tempclim2interp = nc.variables['Temperature'][:,depthclimindex,:,:].squeeze()

if plotclim:
    fig = plt.figure(figsize=(12, 15))
    for i in range(0, 12):
        ax = fig.add_subplot(4,3,i+1)
        plt.pcolormesh(tempclim2interp[i,:,:], cmap=cmap, norm=norm)
        ax.set_xticks([])
        ax.set_yticks([])
    plt.show()
    plt.close()

# Read the interpolated observations and their time (generated by interp_vessel_profiles)
lonobs, latobs, tempobs = np.loadtxt(outputfile, unpack=True)
yearobs, monthobs, daymonths = np.loadtxt(timefile, unpack=True)

print len(lonobs)
print len(yearobs)

if plottest1:
    fig = plt.figure()
    ax = fig.add_subplot(111)
    plt.pcolormesh(lonclim, latclim, tempclim2interp[6,:,:], cmap=cmap, norm=norm2, zorder=2)
    plt.scatter(lonobs, latobs, s=10, c=tempobs, cmap=cmap, norm=norm2, edgecolor='None', zorder=3)
    ax.set_xticks([])
    ax.set_yticks([])
    plt.show()
    plt.close()

#Interpolate the climato on the positions of the observations
# Grid necessary for interpolating

llonclim, llatclim = np.meshgrid(lonclim,latclim)
lonclim2 = llonclim.flatten(1)
latclim2 = llatclim.flatten(1)

# Interpolate climatology where we have coordinates using map_coordinates
# (requires a small coordinates change)
lonobs2 = (lonobs-lonclim[0])/(lonclim[1]-lonclim[0])
latobs2 = (latobs-latclim[0])/(latclim[1]-latclim[0])

print tempclim2interp.shape
print lonobs2.shape
print latobs2.shape
Climvalues = ndimage.map_coordinates(tempclim2interp[6,:,:].T, np.array((lonobs2,latobs2)), order=1, mode='nearest')

if plottest2:
    fig = plt.figure()
    ax = fig.add_subplot(111)
    plt.pcolormesh(lonclim, latclim, tempclim2interp[6,:,:], cmap=cmap, norm=norm2, zorder=2)
    plt.scatter(lonobs, latobs, s=10, c=Climvalues, cmap=cmap, norm=norm2, edgecolor='None', zorder=3)
    ax.set_xticks([])
    ax.set_yticks([])
    plt.show()
    plt.close()

# Compute the anomalies
tempanomalies = tempobs - Climvalues

# Plot anomalies
if plotanom:
    fig = plt.figure()
    ax = fig.add_subplot(111)
    scat = plt.scatter(lonobs, latobs, s=10, c=tempanomalies, cmap=cmapanom, norm=normanom, edgecolor='None', zorder=3)
    plt.colorbar(scat, extend='both')
    ax.set_xticks([])
    ax.set_yticks([])
    plt.show()
    plt.close()